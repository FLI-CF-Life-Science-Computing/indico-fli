
https://docs.getindico.io/en/latest/installation/development/
brew services start postgresql@14
brew services start redis
brew services stop redis
brew services stop postgresql@14
brew services list

createdb indico_template -O $USER
psql indico_template -c "CREATE EXTENSION unaccent; CREATE EXTENSION pg_trgm;"
createdb indico -T indico_template

#RUNNING 2 programs afer activation simultaneously

source ./env/bin/activate
cd src
./bin/maintenance/build-assets.py indico --dev --watch &; indico run -h localhost -q --enable-evalex

#server running on
http://localhost:8000/

#data base access via
psql indico

#on upgrades of data base schemas https://docs.getindico.io/en/stable/installation/upgrade/
Some versions may include database schema upgrades. Make sure to perform them immediately after upgrading. If there are no schema changes, the command will simply do nothing.
This is necessary after data base schemas have been modified. Here, we have altered reservations.

indico db migrate
indico db upgrade
indico db --all-plugins upgrade



#room booking module is here ./src/indico/modules/rb
#room booking mask is here: src/indico/modules/rb/client/js/modules/bookRoom/BookRoomModal.jsx, use jsx to modify webpage for booking
#room booking client side (POST) is located in src/indico/modules/rb/client/js/modules/bookRoom/serializers.js
#room booking server side is located here src/indico/modules/rb//models/reservations.py

To translate to other languages, after changing .po-files, one needs to run

indico i18n compile indico

Translations to german can be found here

indico/translations/de_DE/LC_MESSAGES/messages-react.po

#Summary

## Client side

I have added the additional fields 'funding' (FinalTextArea) and 'service' (radio, bool) in BookRoomModal.jsx (src/indico/modules/rb/client/js/modules/bookRoom/BookRoomModal.jsx) to display the radios and text areas. Subsequently, these fields were registered in the serializer.js (src/indico/modules/rb/client/js/modules/bookRoom/serializers.js) to post this to the web server.

There are two forms. One for making the booking (src/indico/modules/rb/client/js/common/bookings/BookingEdit.jsx) and one for changing it. The later is somewhat divided into to jsx (src/indico/modules/rb/client/js/common/bookings/BookingEdit.jsx and /src/indico/modules/rb/client/js/common/bookings/BookingEditForm.jsx).



## Server side
On the server side, the db schema has been altered to extract and store the additional information in the data base. 

This is an example of the addition made to src/indico/modules/rb//models/reservations.py

   #TODO addition by SH for funding source
     #updating data base model https://docs.getindico.io/en/stable/plugins/models/
     funding = db.Column(
         db.Text,
         nullable=True,
         default=''
     )

The data base is build using alembric. Thus, modifications need to be added via `indico db migrate`, creating some form of diff, followed by indico db upgrade to finalize the changes to the data base. 


In the first attempt I had difficulties with the text field that was originally set to `nullable=False` creating an error. Subsequently, I needed to grep for the error-producing diff-file created by `indico db migrate`, altered it directly to `nullable=True`, upgraded successfully with `indico db upgrade`, altered the code in reservations.py to reflect the change, migrated and upgraded again. 

This may have been caused by the nullIfEmpty (now removed where comment) in the BookRoomModal.jsx.

    {/*TODO addition by SH request for funding source */} 
                  <FinalTextArea
                    name="funding"
                    //nullIfEmpty
                    placeholder={Translate.string('External funding source')}
                    disabled={fprops.submitSucceeded}
                    required={false} 
                  />             

The existence of the added fields was confirmed and it is stored properly in the data base table
roombooking.reservations (SELECT * from roombooking.reservations;)

